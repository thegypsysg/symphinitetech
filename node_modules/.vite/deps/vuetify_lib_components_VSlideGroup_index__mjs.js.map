{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSlideGroup/VSlideGroup.tsx", "../../vuetify/src/components/VSlideGroup/helpers.ts", "../../vuetify/src/components/VSlideGroup/VSlideGroupItem.tsx"],
  "sourcesContent": ["// Styles\nimport './VSlideGroup.sass'\n\n// Components\nimport { VFadeTransition } from '@/components/transitions'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { useDisplay } from '@/composables'\nimport { useResizeObserver } from '@/composables/resizeObserver'\nimport { useRtl } from '@/composables/locale'\n\n// Utilities\nimport { computed, ref, watch } from 'vue'\nimport { clamp, genericComponent, IN_BROWSER, useRender } from '@/util'\nimport { bias, calculateCenteredOffset, calculateUpdatedOffset } from './helpers'\n\n// Types\nimport type { InjectionKey } from 'vue'\nimport type { GroupProvide } from '@/composables/group'\n\nexport const VSlideGroupSymbol: InjectionKey<GroupProvide> = Symbol.for('vuetify:v-slide-group')\n\ninterface SlideGroupSlot {\n  next: GroupProvide['next']\n  prev: GroupProvide['prev']\n  select: GroupProvide['select']\n  isSelected: GroupProvide['isSelected']\n}\n\ntype VSlideGroupSlots = {\n  default: [SlideGroupSlot]\n  prev: [SlideGroupSlot]\n  next: [SlideGroupSlot]\n}\n\nexport const VSlideGroup = genericComponent<VSlideGroupSlots>()({\n  name: 'VSlideGroup',\n\n  props: {\n    centerActive: Boolean,\n    direction: {\n      type: String,\n      default: 'horizontal',\n    },\n    symbol: {\n      type: null,\n      default: VSlideGroupSymbol,\n    },\n    nextIcon: {\n      type: IconValue,\n      default: '$next',\n    },\n    prevIcon: {\n      type: IconValue,\n      default: '$prev',\n    },\n    showArrows: {\n      type: [Boolean, String],\n      validator: (v: any) => (\n        typeof v === 'boolean' || [\n          'always',\n          'desktop',\n          'mobile',\n        ].includes(v)\n      ),\n    },\n\n    ...makeTagProps(),\n    ...makeGroupProps({\n      selectedClass: 'v-slide-group-item--active',\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { isRtl } = useRtl()\n    const { mobile } = useDisplay()\n    const group = useGroup(props, props.symbol)\n    const isOverflowing = ref(false)\n    const scrollOffset = ref(0)\n    const containerSize = ref(0)\n    const contentSize = ref(0)\n    const isHorizontal = computed(() => props.direction === 'horizontal')\n\n    const { resizeRef: containerRef, contentRect: containerRect } = useResizeObserver()\n    const { resizeRef: contentRef, contentRect } = useResizeObserver()\n\n    const firstSelectedIndex = computed(() => {\n      if (!group.selected.value.length) return -1\n\n      return group.items.value.findIndex(item => item.id === group.selected.value[0])\n    })\n\n    const lastSelectedIndex = computed(() => {\n      if (!group.selected.value.length) return -1\n\n      return group.items.value.findIndex(item => item.id === group.selected.value[group.selected.value.length - 1])\n    })\n\n    if (IN_BROWSER) {\n      let frame = -1\n      watch(() => [group.selected.value, containerRect.value, contentRect.value, isHorizontal.value], () => {\n        cancelAnimationFrame(frame)\n        frame = requestAnimationFrame(() => {\n          if (containerRect.value && contentRect.value) {\n            const sizeProperty = isHorizontal.value ? 'width' : 'height'\n\n            containerSize.value = containerRect.value[sizeProperty]\n            contentSize.value = contentRect.value[sizeProperty]\n\n            isOverflowing.value = containerSize.value + 1 < contentSize.value\n          }\n\n          if (firstSelectedIndex.value >= 0 && contentRef.value) {\n            // TODO: Is this too naive? Should we store element references in group composable?\n            const selectedElement = contentRef.value.children[lastSelectedIndex.value] as HTMLElement\n\n            if (firstSelectedIndex.value === 0 || !isOverflowing.value) {\n              scrollOffset.value = 0\n            } else if (props.centerActive) {\n              scrollOffset.value = calculateCenteredOffset({\n                selectedElement,\n                containerSize: containerSize.value,\n                contentSize: contentSize.value,\n                isRtl: isRtl.value,\n                isHorizontal: isHorizontal.value,\n              })\n            } else if (isOverflowing.value) {\n              scrollOffset.value = calculateUpdatedOffset({\n                selectedElement,\n                containerSize: containerSize.value,\n                contentSize: contentSize.value,\n                isRtl: isRtl.value,\n                currentScrollOffset: scrollOffset.value,\n                isHorizontal: isHorizontal.value,\n              })\n            }\n          }\n        })\n      })\n    }\n\n    const disableTransition = ref(false)\n\n    let startTouch = 0\n    let startOffset = 0\n\n    function onTouchstart (e: TouchEvent) {\n      const sizeProperty = isHorizontal.value ? 'clientX' : 'clientY'\n      const sign = isRtl.value && isHorizontal.value ? -1 : 1\n      startOffset = sign * scrollOffset.value\n      startTouch = e.touches[0][sizeProperty]\n      disableTransition.value = true\n    }\n\n    function onTouchmove (e: TouchEvent) {\n      if (!isOverflowing.value) return\n\n      const sizeProperty = isHorizontal.value ? 'clientX' : 'clientY'\n      const sign = isRtl.value && isHorizontal.value ? -1 : 1\n      scrollOffset.value = sign * (startOffset + startTouch - e.touches[0][sizeProperty])\n    }\n\n    function onTouchend (e: TouchEvent) {\n      const maxScrollOffset = contentSize.value - containerSize.value\n\n      if (scrollOffset.value < 0 || !isOverflowing.value) {\n        scrollOffset.value = 0\n      } else if (scrollOffset.value >= maxScrollOffset) {\n        scrollOffset.value = maxScrollOffset\n      }\n\n      disableTransition.value = false\n    }\n\n    function onScroll () {\n      if (!containerRef.value) return\n\n      containerRef.value[isHorizontal.value ? 'scrollLeft' : 'scrollTop'] = 0\n    }\n\n    const isFocused = ref(false)\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n\n      if (!isOverflowing.value || !contentRef.value) return\n\n      // Focused element is likely to be the root of an item, so a\n      // breadth-first search will probably find it in the first iteration\n      for (const el of e.composedPath()) {\n        for (const item of contentRef.value.children) {\n          if (item === el) {\n            scrollOffset.value = calculateUpdatedOffset({\n              selectedElement: item as HTMLElement,\n              containerSize: containerSize.value,\n              contentSize: contentSize.value,\n              isRtl: isRtl.value,\n              currentScrollOffset: scrollOffset.value,\n              isHorizontal: isHorizontal.value,\n            })\n            return\n          }\n        }\n      }\n    }\n\n    function onFocusout (e: FocusEvent) {\n      isFocused.value = false\n    }\n\n    function onFocus (e: FocusEvent) {\n      if (\n        !isFocused.value &&\n        !(e.relatedTarget && contentRef.value?.contains(e.relatedTarget as Node))\n      ) focus()\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      if (!contentRef.value) return\n\n      if (isHorizontal.value) {\n        if (e.key === 'ArrowRight') {\n          focus(isRtl.value ? 'prev' : 'next')\n        } else if (e.key === 'ArrowLeft') {\n          focus(isRtl.value ? 'next' : 'prev')\n        }\n      } else {\n        if (e.key === 'ArrowDown') {\n          focus('next')\n        } else if (e.key === 'ArrowUp') {\n          focus('prev')\n        }\n      }\n\n      if (e.key === 'Home') {\n        focus('first')\n      } else if (e.key === 'End') {\n        focus('last')\n      }\n    }\n\n    function focus (location?: 'next' | 'prev' | 'first' | 'last') {\n      if (!contentRef.value) return\n\n      if (!location) {\n        const focusable = [...contentRef.value.querySelectorAll(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled')) as HTMLElement[]\n        focusable[0]?.focus()\n      } else if (location === 'next') {\n        const el = contentRef.value.querySelector(':focus')?.nextElementSibling as HTMLElement | undefined\n        if (el) el.focus()\n        else focus('first')\n      } else if (location === 'prev') {\n        const el = contentRef.value.querySelector(':focus')?.previousElementSibling as HTMLElement | undefined\n        if (el) el.focus()\n        else focus('last')\n      } else if (location === 'first') {\n        (contentRef.value.firstElementChild as HTMLElement)?.focus()\n      } else if (location === 'last') {\n        (contentRef.value.lastElementChild as HTMLElement)?.focus()\n      }\n    }\n\n    function scrollTo (location: 'prev' | 'next') {\n      const newAbsoluteOffset = scrollOffset.value + (location === 'prev' ? -1 : 1) * containerSize.value\n\n      scrollOffset.value = clamp(newAbsoluteOffset, 0, contentSize.value - containerSize.value)\n    }\n\n    const contentStyles = computed(() => {\n      // This adds friction when scrolling the 'wrong' way when at max offset\n      let scrollAmount = scrollOffset.value > contentSize.value - containerSize.value\n        ? -(contentSize.value - containerSize.value) + bias(contentSize.value - containerSize.value - scrollOffset.value)\n        : -scrollOffset.value\n\n      // This adds friction when scrolling the 'wrong' way when at min offset\n      if (scrollOffset.value <= 0) {\n        scrollAmount = bias(-scrollOffset.value)\n      }\n\n      const sign = isRtl.value && isHorizontal.value ? -1 : 1\n      return {\n        transform: `translate${isHorizontal.value ? 'X' : 'Y'}(${sign * scrollAmount}px)`,\n        transition: disableTransition.value ? 'none' : '',\n        willChange: disableTransition.value ? 'transform' : '',\n      }\n    })\n\n    const slotProps = computed(() => ({\n      next: group.next,\n      prev: group.prev,\n      select: group.select,\n      isSelected: group.isSelected,\n    }))\n\n    const hasAffixes = computed(() => {\n      switch (props.showArrows) {\n        // Always show arrows on desktop & mobile\n        case 'always': return true\n\n        // Always show arrows on desktop\n        case 'desktop': return !mobile.value\n\n        // Show arrows on mobile when overflowing.\n        // This matches the default 2.2 behavior\n        case true: return isOverflowing.value || Math.abs(scrollOffset.value) > 0\n\n        // Always show on mobile\n        case 'mobile': return (\n          mobile.value ||\n          (isOverflowing.value || Math.abs(scrollOffset.value) > 0)\n        )\n\n        // https://material.io/components/tabs#scrollable-tabs\n        // Always show arrows when\n        // overflowed on desktop\n        default: return (\n          !mobile.value &&\n          (isOverflowing.value || Math.abs(scrollOffset.value) > 0)\n        )\n      }\n    })\n\n    const hasPrev = computed(() => {\n      return Math.abs(scrollOffset.value) > 0\n    })\n\n    const hasNext = computed(() => {\n      // Check one scroll ahead to know the width of right-most item\n      return contentSize.value > Math.abs(scrollOffset.value) + containerSize.value\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-slide-group',\n          {\n            'v-slide-group--vertical': !isHorizontal.value,\n            'v-slide-group--has-affixes': hasAffixes.value,\n            'v-slide-group--is-overflowing': isOverflowing.value,\n          },\n        ]}\n        tabindex={ (isFocused.value || group.selected.value.length) ? -1 : 0 }\n        onFocus={ onFocus }\n      >\n        { hasAffixes.value && (\n          <div\n            key=\"prev\"\n            class={[\n              'v-slide-group__prev',\n              { 'v-slide-group__prev--disabled': !hasPrev.value },\n            ]}\n            onClick={ () => scrollTo('prev') }\n          >\n            { slots.prev?.(slotProps.value) ?? (\n              <VFadeTransition>\n                <VIcon icon={ isRtl.value ? props.nextIcon : props.prevIcon }></VIcon>\n              </VFadeTransition>\n            )}\n          </div>\n        )}\n\n        <div\n          key=\"container\"\n          ref={ containerRef }\n          class=\"v-slide-group__container\"\n          onScroll={ onScroll }\n        >\n          <div\n            ref={ contentRef }\n            class=\"v-slide-group__content\"\n            style={ contentStyles.value }\n            onTouchstartPassive={ onTouchstart }\n            onTouchmovePassive={ onTouchmove }\n            onTouchendPassive={ onTouchend }\n            onFocusin={ onFocusin }\n            onFocusout={ onFocusout }\n            onKeydown={ onKeydown }\n          >\n            { slots.default?.(slotProps.value) }\n          </div>\n        </div>\n\n        { hasAffixes.value && (\n          <div\n            key=\"next\"\n            class={[\n              'v-slide-group__next',\n              { 'v-slide-group__next--disabled': !hasNext.value },\n            ]}\n            onClick={ () => scrollTo('next') }\n          >\n            { slots.next?.(slotProps.value) ?? (\n              <VFadeTransition>\n                <VIcon icon={ isRtl.value ? props.prevIcon : props.nextIcon }></VIcon>\n              </VFadeTransition>\n            )}\n          </div>\n        )}\n      </props.tag>\n    ))\n\n    return {\n      selected: group.selected,\n      scrollTo,\n      scrollOffset,\n      focus,\n    }\n  },\n})\n\nexport type VSlideGroup = InstanceType<typeof VSlideGroup>\n", "export function bias (val: number) {\n  const c = 0.501\n  const x = Math.abs(val)\n  return Math.sign(val) * (x / ((1 / c - 2) * (1 - x) + 1))\n}\n\nexport function calculateUpdatedOffset ({\n  selectedElement,\n  containerSize,\n  contentSize,\n  isRtl,\n  currentScrollOffset,\n  isHorizontal,\n}: {\n  selectedElement: HTMLElement\n  containerSize: number\n  contentSize: number\n  isRtl: boolean\n  currentScrollOffset: number\n  isHorizontal: boolean\n}): number {\n  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight\n  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop\n  const adjustedOffsetStart = isRtl && isHorizontal ? (contentSize - offsetStart - clientSize) : offsetStart\n\n  const totalSize = containerSize + currentScrollOffset\n  const itemOffset = clientSize + adjustedOffsetStart\n  const additionalOffset = clientSize * 0.4\n\n  if (adjustedOffsetStart <= currentScrollOffset) {\n    currentScrollOffset = Math.max(adjustedOffsetStart - additionalOffset, 0)\n  } else if (totalSize <= itemOffset) {\n    currentScrollOffset = Math.min(currentScrollOffset - (totalSize - itemOffset - additionalOffset), contentSize - containerSize)\n  }\n\n  return currentScrollOffset\n}\n\nexport function calculateCenteredOffset ({\n  selectedElement,\n  containerSize,\n  contentSize,\n  isRtl,\n  isHorizontal,\n}: {\n  selectedElement: HTMLElement\n  containerSize: number\n  contentSize: number\n  isRtl: boolean\n  isHorizontal: boolean\n}): number {\n  const clientSize = isHorizontal ? selectedElement.clientWidth : selectedElement.clientHeight\n  const offsetStart = isHorizontal ? selectedElement.offsetLeft : selectedElement.offsetTop\n\n  const offsetCentered = isRtl && isHorizontal\n    ? contentSize - offsetStart - clientSize / 2 - containerSize / 2\n    : offsetStart + clientSize / 2 - containerSize / 2\n\n  return Math.min(contentSize - containerSize, Math.max(0, offsetCentered))\n}\n", "// Composables\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\n\n// Utilities\nimport { genericComponent } from '@/util'\nimport { VSlideGroupSymbol } from './VSlideGroup'\n\n// Types\nimport type { UnwrapRef } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\ntype VSlideGroupItemSlots = {\n  default: [{\n    isSelected: UnwrapRef<GroupItemProvide['isSelected']>\n    select: GroupItemProvide['select']\n    toggle: GroupItemProvide['toggle']\n    selectedClass: UnwrapRef<GroupItemProvide['selectedClass']>\n  }]\n}\n\nexport const VSlideGroupItem = genericComponent<VSlideGroupItemSlots>()({\n  name: 'VSlideGroupItem',\n\n  props: {\n    ...makeGroupItemProps(),\n  },\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const slideGroupItem = useGroupItem(props, VSlideGroupSymbol)\n\n    return () => slots.default?.({\n      isSelected: slideGroupItem.isSelected.value,\n      select: slideGroupItem.select,\n      toggle: slideGroupItem.toggle,\n      selectedClass: slideGroupItem.selectedClass.value,\n    })\n  },\n})\n\nexport type VSlideGroupItem = InstanceType<typeof VSlideGroupItem>\n"],
  "mappings": "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",
  "names": ["bias", "val", "c", "x", "Math", "abs", "sign", "calculateUpdatedOffset", "selectedElement", "containerSize", "contentSize", "isRtl", "currentScrollOffset", "isHorizontal", "clientSize", "clientWidth", "clientHeight", "offsetStart", "offsetLeft", "offsetTop", "adjustedOffsetStart", "totalSize", "itemOffset", "additionalOffset", "max", "min", "calculateCenteredOffset", "offsetCentered", "VSlideGroupSymbol", "Symbol", "for", "VSlideGroup", "genericComponent", "name", "props", "centerActive", "Boolean", "direction", "type", "String", "default", "symbol", "nextIcon", "IconValue", "prevIcon", "showArrows", "validator", "v", "includes", "makeTagProps", "makeGroupProps", "selectedClass", "emits", "value", "setup", "slots", "isRtl", "useRtl", "mobile", "useDisplay", "group", "useGroup", "isOverflowing", "ref", "scrollOffset", "containerSize", "contentSize", "isHorizontal", "computed", "resizeRef", "containerRef", "contentRect", "containerRect", "useResizeObserver", "contentRef", "firstSelectedIndex", "selected", "length", "items", "findIndex", "item", "id", "lastSelectedIndex", "IN_BROWSER", "frame", "watch", "cancelAnimationFrame", "requestAnimationFrame", "sizeProperty", "selectedElement", "children", "calculateCenteredOffset", "calculateUpdatedOffset", "currentScrollOffset", "disableTransition", "startTouch", "startOffset", "onTouchstart", "e", "sign", "touches", "onTouchmove", "onTouchend", "maxScrollOffset", "onScroll", "isFocused", "onFocusin", "el", "composedPath", "onFocusout", "onFocus", "relatedTarget", "contains", "focus", "onKeydown", "key", "location", "focusable", "querySelectorAll", "filter", "hasAttribute", "querySelector", "nextElementSibling", "previousElementSibling", "firstElementChild", "lastElementChild", "scrollTo", "newAbsoluteOffset", "clamp", "contentStyles", "scrollAmount", "bias", "transform", "transition", "willChange", "slotProps", "next", "prev", "select", "isSelected", "hasAffixes", "Math", "abs", "hasPrev", "hasNext", "useRender", "VSlideGroupItem", "genericComponent", "name", "props", "makeGroupItemProps", "emits", "val", "setup", "slots", "slideGroupItem", "useGroupItem", "VSlideGroupSymbol", "default", "isSelected", "value", "select", "toggle", "selectedClass"]
}
